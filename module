module ALU (
    input  [3:0] A,        // 4-bit input A
    input  [3:0] B,        // 4-bit input B
    input  [2:0] opcode,   // 3-bit opcode
    output reg [3:0] result,
    output reg carry_out,
    output reg zero
);

always @(*) begin
    carry_out = 0;
    case (opcode)
        3'b000: {carry_out, result} = A + B;           // Addition
        3'b001: {carry_out, result} = A - B;           // Subtraction
        3'b010: result = A & B;                        // AND
        3'b011: result = A | B;                        // OR
        3'b100: result = ~A;                           // NOT A
        default: result = 4'b0000;
    endcase

    zero = (result == 4'b0000);
end

endmodule
